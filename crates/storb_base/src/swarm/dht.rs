use std::collections::{HashMap, HashSet};
use std::error::Error;
use std::num::NonZeroUsize;
use std::path::PathBuf;
use std::sync::Arc;
use std::time::Duration;

use libp2p::futures::StreamExt;
use libp2p::kad::{
    self, AddProviderOk, BootstrapOk, GetProvidersOk, GetRecordOk, PeerRecord, ProgressStep,
    PutRecordOk, QueryId, QueryResult, Quorum, Record, RecordKey,
};
use libp2p::swarm::{NetworkBehaviour, Swarm, SwarmEvent};
use libp2p::{identify, identity, mdns, ping, Multiaddr, PeerId, SwarmBuilder};
use tokio::sync::{mpsc, oneshot, watch, Mutex};
use tracing::{debug, error, info, trace, warn};

use super::{db, models, store::StorbStore};
use crate::constants::STORB_KAD_PROTOCOL_NAME;
use crate::memory_db::MemoryDb;
use crate::utils::is_valid_external_addr;
use crate::AddressBook;

#[async_trait::async_trait]
pub trait PeerVerifier: Send + Sync {
    /// Verifies if the peer identified by the public key is allowed.
    /// Returns Ok(true) if allowed, Ok(false) if not allowed, Err if the check failed.
    async fn verify_peer(
        &self,
        peer_id: libp2p::identity::PeerId,
    ) -> Result<bool, Box<dyn Error + Send + Sync>>;
}

// Public BittensorPeerVerifier implementation
pub struct BittensorPeerVerifier {
    pub address_book: AddressBook,
}

#[async_trait::async_trait]
impl PeerVerifier for BittensorPeerVerifier {
    async fn verify_peer(
        &self,
        peer_id: libp2p::identity::PeerId,
    ) -> Result<bool, Box<dyn Error + Send + Sync>> {
        info!("Verifying peer {}", peer_id);

        // Access the neurons list with read lock
        let neurons_list = self.address_book.read().await;

        if neurons_list.is_empty() {
            warn!("No neurons registered in the address book. Try again later.");
            return Ok(false);
        }

        if neurons_list.contains_key(&peer_id) {
            // Peer is registered
            info!(
                "Peer {} verified: Hotkey found in registered neurons.",
                peer_id
            );
            return Ok(true);
        }

        // No match found
        warn!(
            "Peer {} NOT verified: Hotkey not found in registered neurons.",
            peer_id
        );
        Ok(false)
    }
}
/// Network behaviour for Storb, combining Kademlia, mDNS, Identify, and Ping.
///
/// This behaviour aggregates multiple protocols into a single behaviour that can be used
/// by a libp2p swarm.
#[derive(NetworkBehaviour)]
#[behaviour(out_event = "StorbEvent")]
pub struct StorbBehaviour {
    /// Kademlia protocol for distributed hash table operations.
    pub kademlia: kad::Behaviour<StorbStore>,

    /// mDNS protocol for local peer discovery.
    pub mdns: mdns::tokio::Behaviour,

    /// Identify protocol for peer metadata exchange.
    pub identify: identify::Behaviour,

    /// Ping protocol for connectivity checks.
    pub ping: ping::Behaviour,
}

/// Enum representing events generated by the Storb network behaviour.
///
/// This enum aggregates events from individual protocols (Kademlia, mDNS, Identify, Ping)
/// into a single event type.
#[derive(Debug)]
pub enum StorbEvent {
    /// Event from the Kademlia protocol.
    Kademlia(Box<kad::Event>),
    /// Event from the mDNS protocol.
    Mdns(Box<mdns::Event>),
    /// Event from the Identify protocol.
    Identify(Box<identify::Event>),
    /// Event from the Ping protocol.
    Ping(Box<ping::Event>),
}

impl From<kad::Event> for StorbEvent {
    fn from(event: kad::Event) -> Self {
        StorbEvent::Kademlia(Box::new(event))
    }
}

impl From<mdns::Event> for StorbEvent {
    fn from(event: mdns::Event) -> Self {
        StorbEvent::Mdns(Box::new(event))
    }
}

impl From<identify::Event> for StorbEvent {
    fn from(event: identify::Event) -> Self {
        StorbEvent::Identify(Box::new(event))
    }
}

impl From<ping::Event> for StorbEvent {
    fn from(event: ping::Event) -> Self {
        StorbEvent::Ping(Box::new(event))
    }
}

/// Internal enum used to associate Kademlia query IDs with their corresponding
/// response channels.
///
/// This enum is used to route responses from asynchronous DHT queries back
/// to the requesters.
enum QueryChannel {
    #[allow(dead_code)]
    Bootstrap(oneshot::Sender<Result<(), Box<dyn Error + Send + Sync>>>),
    GetRecord(
        usize,
        Vec<PeerRecord>,
        oneshot::Sender<Result<Vec<PeerRecord>, Box<dyn Error + Send + Sync>>>,
    ),
    PutRecord(oneshot::Sender<Result<(), Box<dyn Error + Send + Sync>>>),
    GetProviders(
        HashSet<PeerId>,
        oneshot::Sender<Result<HashSet<PeerId>, Box<dyn Error + Send + Sync>>>,
    ),
    StartProviding(oneshot::Sender<Result<(), Box<dyn Error + Send + Sync>>>),
}

/// DHT commands that can be issued to the StorbDHT instance.
pub enum DhtCommand {
    Put {
        key: RecordKey,
        serialized_value: Vec<u8>,
        response_tx: oneshot::Sender<Result<(), Box<dyn std::error::Error + Send + Sync>>>,
    }, // Add other commands as needed
    Get {
        key: RecordKey,
        response_tx:
            oneshot::Sender<Result<Vec<PeerRecord>, Box<dyn std::error::Error + Send + Sync>>>,
    },
    GetProviders {
        key: RecordKey,
        response_tx:
            oneshot::Sender<Result<HashSet<PeerId>, Box<dyn std::error::Error + Send + Sync>>>,
    },
    StartProviding {
        key: RecordKey,
        response_tx: oneshot::Sender<Result<(), Box<dyn std::error::Error + Send + Sync>>>,
    },
}

/// A Distributed Hash Table (DHT) for the Storb network.
///
/// This struct encapsulates the libp2p swarm along with mechanisms for bootstrapping,
/// query management, and record storage.
pub struct StorbDHT {
    /// The libp2p swarm managing network behaviour.
    pub swarm: Swarm<StorbBehaviour>,
    /// Watch channel sender used to signal when bootstrap is complete.
    bootstrap_done_sender: watch::Sender<bool>,
    /// Watch channel receiver to observe bootstrap completion.
    bootstrap_done: watch::Receiver<bool>,
    /// Mapping of query IDs to their corresponding response channels.
    queries: Arc<Mutex<HashMap<QueryId, QueryChannel>>>,
    /// Channel receiver for DHT commands
    command_receiver: mpsc::Receiver<DhtCommand>,
    bootstrap_nodes: Vec<Multiaddr>,
    peer_verifier: Arc<dyn PeerVerifier>,
    /// Peers that have established a connection but haven't been identified and verified yet.
    pending_verification: Arc<Mutex<HashSet<PeerId>>>,
    /// Peers that have been successfully verified.
    verified_peers: Arc<Mutex<HashSet<PeerId>>>,
    /// Public keys received via Identify protocol. Needed for verification.
    known_peers: Arc<Mutex<HashSet<PeerId>>>,
}

impl StorbDHT {
    /// Creates a new StorbDHT instance.
    ///
    /// This function sets up the RocksDB store, initializes the StorbStore,
    /// configures Kademlia, mDNS, Identify, and Ping protocols, and builds the libp2p swarm.
    ///
    /// # Arguments
    ///
    /// * `dht_dir` - Path to the directory for database storage.
    /// * `port` - Port number to listen on.
    /// * `keys` - Local identity keypair.
    pub fn new(
        dht_dir: PathBuf,
        mem_db: Option<Arc<MemoryDb>>,
        port: u16,
        bootstrap_peers: Option<Vec<Multiaddr>>,
        local_keypair: identity::Keypair,
        peer_verifier: Arc<dyn PeerVerifier>,
    ) -> Result<(Self, mpsc::Sender<DhtCommand>), Box<dyn Error>> {
        let (command_sender, command_receiver) = mpsc::channel(32);

        assert!(port < 65535, "Invalid port number");

        // Generate a local keypair and derive our peer ID.
        let local_peer_id = libp2p::PeerId::from_public_key(&local_keypair.public());

        // Create the RocksDB store and our custom StorbStore.
        // (Propagate errors instead of panicking.)
        let db = db::RocksDBStore::new(
            db::RocksDBConfig {
                path: dht_dir,
                max_batch_delay: Duration::from_millis(10),
                max_batch_size: 100,
            },
            mem_db,
        )?;

        let store = StorbStore::new(
            std::sync::Arc::new(db),
            NonZeroUsize::new(20).ok_or("Invalid size parameter")?,
            NonZeroUsize::new(20).ok_or("Invalid size parameter")?,
        );

        // Create Kademlia with a minimal configuration.
        let kad_config = kad::Config::new(STORB_KAD_PROTOCOL_NAME);
        let kademlia = kad::Behaviour::with_config(local_peer_id, store, kad_config);

        // TODO: get rid of local peer discovery
        // Use mDNS for local peer discovery.
        let mdns = mdns::tokio::Behaviour::new(mdns::Config::default(), local_peer_id)?;

        // Configure Identify to gather basic peer metadata.
        let identify_config =
            identify::Config::new("0.0.1".to_string(), local_keypair.public().clone());
        let identify = identify::Behaviour::new(identify_config);

        // Use Ping to check connectivity.
        let ping = ping::Behaviour::new(ping::Config::default());

        // Build the combined behaviour.
        let behaviour = StorbBehaviour {
            kademlia,
            mdns,
            identify,
            ping,
        };

        // Build the Swarm using QUIC transport and Tokio.
        let mut swarm = SwarmBuilder::with_existing_identity(local_keypair)
            .with_tokio()
            .with_quic() // Using QUIC for transport.
            .with_behaviour(|_| Ok(behaviour))?
            .with_swarm_config(|cfg| cfg)
            .build();

        // Set Kademlia to server mode.
        swarm
            .behaviour_mut()
            .kademlia
            .set_mode(Some(kad::Mode::Server));

        // Listen on a QUIC multiaddress. (0.0.0.0 means all interfaces; port is ephemeral.)
        let listen_addr: Multiaddr = format!("/ip4/0.0.0.0/udp/{port}/quic-v1").parse()?;
        swarm.listen_on(listen_addr)?;

        let listeners: Vec<Multiaddr> = swarm.listeners().cloned().collect();
        info!("Listening on {:?}", listeners);

        // Create the watch channel that indicates when bootstrap is done.
        let (bootstrap_done_sender, bootstrap_done) = watch::channel(false);

        let mut bootstrap_nodes = Vec::new();
        if let Some(peers) = bootstrap_peers {
            for addr in &peers {
                if let Some(peer_id) = Self::extract_peer_info(addr) {
                    info!("Adding bootstrap node: {} at {}", peer_id, addr);
                    swarm
                        .behaviour_mut()
                        .kademlia
                        .add_address(&peer_id, addr.clone());
                    if let Err(err) = swarm.dial(addr.clone()) {
                        error!("Failed to dial bootstrap node {}: {:?}", addr, err);
                    }
                    bootstrap_nodes.push(addr.clone());
                } else {
                    error!("Failed to extract PeerId from bootstrap address: {}", addr);
                }
            }
        }

        match swarm.behaviour_mut().kademlia.bootstrap() {
            Ok(query_id) => {
                info!("Kademlia bootstrap initiated with QueryId: {:?}", query_id);
            }
            Err(e) => {
                error!("Failed to initiate Kademlia bootstrap: {:?}", e);
            }
        }

        Ok((
            Self {
                swarm,
                bootstrap_done_sender,
                bootstrap_done,
                queries: Arc::new(Mutex::new(HashMap::new())),
                command_receiver,
                bootstrap_nodes,
                peer_verifier,
                pending_verification: Arc::new(Mutex::new(HashSet::new())),
                verified_peers: Arc::new(Mutex::new(HashSet::new())),
                known_peers: Arc::new(Mutex::new(HashSet::new())),
            },
            command_sender,
        ))
    }

    fn extract_peer_info(addr: &Multiaddr) -> Option<PeerId> {
        addr.iter().find_map(|p| match p {
            libp2p::multiaddr::Protocol::P2p(peer_id) => Some(peer_id),
            _ => None,
        })
    }

    /// Processes a Kademlia event and routes query responses accordingly.
    ///
    /// This function inspects the provided Kademlia event, matches on the query result,
    /// and sends responses through the associated oneshot channels stored in the query map.
    async fn inject_kad_event(
        &mut self,
        event: kad::Event,
        queries: &mut HashMap<QueryId, QueryChannel>,
    ) {
        trace!("Injecting Kademlia event: {:?}", event);
        if let kad::Event::OutboundQueryProgressed {
            id,
            result,
            step: ProgressStep { last, .. },
            ..
        } = event
        {
            let query_id = id;

            match result {
                QueryResult::Bootstrap(Ok(BootstrapOk {
                    num_remaining,
                    peer,
                })) => {
                    debug!(
                        "Bootstrap succeeded with {:?} remaining and {:?}",
                        num_remaining, peer
                    );
                    if num_remaining == 0 {
                        // Signal that bootstrap is complete via the watch channel.
                        self.bootstrap_done_sender.send(true).unwrap_or_else(|e| {
                            debug!("Failed to signal bootstrap completion: {:?}", e)
                        });
                        if let Some(QueryChannel::Bootstrap(ch)) = queries.remove(&query_id) {
                            let _ = ch.send(Ok(()));
                        }
                    }
                }
                QueryResult::Bootstrap(Err(e)) => {
                    error!("Bootstrap query failed: {:?}", e); // Logged as error now
                                                               // *** Potential Fix: Signal done anyway to prevent deadlock ***
                                                               // This allows operations to proceed, though DHT might be poorly bootstrapped.
                                                               // Better long-term solutions might involve retries or checking table size.
                    warn!("Signalling bootstrap as 'done' despite error to prevent deadlock.");
                    self.bootstrap_done_sender.send(true).unwrap_or_else(|e| {
                        debug!("Failed to signal bootstrap completion after error: {:?}", e)
                    });
                    // Remove query channel if you track the specific bootstrap query ID
                }
                QueryResult::GetRecord(Ok(res)) => {
                    trace!("Getting Record");
                    if let Some(QueryChannel::GetRecord(ref mut quorum, ref mut records, _)) =
                        queries.get_mut(&query_id)
                    {
                        info!("DHT: QUERY REC WITH ID: {}", query_id);

                        if let GetRecordOk::FoundRecord(record) = res {
                            records.push(record);
                        }

                        // If this is the last response or we've met the required quorum...
                        if last || records.len() >= *quorum {
                            // Finish the query in the Kademlia behaviour.
                            if let Some(mut query) =
                                self.swarm.behaviour_mut().kademlia.query_mut(&id)
                            {
                                query.finish();
                            }
                            // Remove the query channel and send back the accumulated records.
                            if let Some(QueryChannel::GetRecord(_, records, sender)) =
                                queries.remove(&query_id)
                            {
                                info!("sent query");
                                let _ = sender.send(Ok(records));
                            }
                        }
                    }
                }
                QueryResult::GetRecord(Err(e)) => {
                    trace!("Query failed: {:?}", e);
                    if let Some(QueryChannel::GetRecord(_, _, ch)) = queries.remove(&query_id) {
                        let _ = ch.send(Err(e.into()));
                    }
                }
                QueryResult::PutRecord(Ok(PutRecordOk { key })) => {
                    info!(
                        "Put record succeeded with key: {:?} and query id: {:?}",
                        key, query_id
                    );
                    if let Some(QueryChannel::PutRecord(ch)) = queries.remove(&query_id) {
                        let _ = ch.send(Ok(()));
                    }
                }
                QueryResult::PutRecord(Err(e)) => {
                    info!(
                        "ERROR: Put record failed: {:?} and query id: {:?}",
                        e, query_id
                    );
                    if let Some(QueryChannel::PutRecord(ch)) = queries.remove(&query_id) {
                        let _ = ch.send(Err(e.into()));
                    }
                }

                QueryResult::GetProviders(Ok(res)) => {
                    trace!("Getting Providers");
                    let mut finish = false;
                    if let Some(QueryChannel::GetProviders(ref mut peers, _)) =
                        queries.get_mut(&query_id)
                    {
                        match res {
                            GetProvidersOk::FoundProviders { key, providers } => {
                                trace!("Found providers for {:?}: {:?}", key, providers);
                                peers.extend(providers);
                            }
                            GetProvidersOk::FinishedWithNoAdditionalRecord { .. } => {}
                        }

                        if last {
                            finish = true;
                        }
                    }
                    if finish {
                        if let Some(QueryChannel::GetProviders(peers, ch)) =
                            queries.remove(&query_id)
                        {
                            let _ = ch.send(Ok(peers));
                        }
                    }
                }
                QueryResult::GetProviders(Err(e)) => {
                    info!("Query failed: {:?}", e);
                    if let Some(QueryChannel::GetProviders(_, ch)) = queries.remove(&query_id) {
                        let _ = ch.send(Err(e.into()));
                    }
                }
                QueryResult::StartProviding(Ok(AddProviderOk { key })) => {
                    info!("Start providing succeeded for {:?}", key);
                    if let Some(QueryChannel::StartProviding(ch)) = queries.remove(&query_id) {
                        let _ = ch.send(Ok(()));
                    }
                }
                QueryResult::StartProviding(Err(e)) => {
                    info!("Start providing failed: {:?}", e);
                    if let Some(QueryChannel::StartProviding(ch)) = queries.remove(&query_id) {
                        let _ = ch.send(Err(e.into()));
                    }
                }
                _ => {}
            }
        }
    }

    fn inject_kad_incoming_query(&mut self, event: kad::Event) {
        if let kad::Event::InboundRequest { request } = event {
            info!("Incoming request: {:?}", request);
        }
    }

    /// Processes an mDNS event and updates the Kademlia behaviour with discovered or expired peers.
    fn inject_mdns_event(&mut self, event: mdns::Event) {
        trace!("Injecting mDNS event: {:?}", event);

        match event {
            mdns::Event::Discovered(peers) => {
                for (peer_id, addr) in peers {
                    trace!("Discovered peer: {:?} at {:?}", peer_id, addr);
                    self.swarm
                        .behaviour_mut()
                        .kademlia
                        .add_address(&peer_id, addr);
                }
            }
            mdns::Event::Expired(peers) => {
                for (peer_id, addr) in peers {
                    trace!("Expired peer: {:?} at {:?}", peer_id, addr);
                    self.swarm
                        .behaviour_mut()
                        .kademlia
                        .remove_address(&peer_id, &addr);
                }
            }
        }
    }

    /// Processes DHT events and commands.
    ///
    /// This asynchronous function continuously processes swarm events and DHT commands,
    /// handling peer discovery, connection management, and DHT operations.
    pub async fn process_events(&mut self) {
        let mut bootstrap_interval = tokio::time::interval(Duration::from_secs(5));
        loop {
            let peer_verifier = self.peer_verifier.clone();
            let pending_verification = self.pending_verification.clone();
            let verified_peers = self.verified_peers.clone();
            let known_peers = self.known_peers.clone();
            tokio::select! {
                _ = bootstrap_interval.tick() => {
                    if self.bootstrap_nodes.is_empty() {
                        return;
                    }
                    let connected_count = self.bootstrap_nodes.iter()
                        .filter_map(Self::extract_peer_info)
                        .filter(|peer_id| self.swarm.connected_peers().any(|p| p == peer_id))
                        .count();

                if connected_count < 1 {
                        // Dial any bootstrap node that's not connected.
                        for addr in self.bootstrap_nodes.clone() {
                            if let Some(peer_id) = Self::extract_peer_info(&addr) {
                                if !self.swarm.connected_peers().any(|p| p == &peer_id) {
                                    debug!("Dialing bootstrap node: {} at {}", peer_id, addr);
                                    if let Err(err) = self.swarm.dial(addr.clone()) {
                                        error!("Failed to dial bootstrap node {}: {:?}", addr, err);
                                    }
                                    self.swarm.behaviour_mut().kademlia.add_address(&peer_id, addr);

                                } else {
                                    debug!("Already connected to bootstrap node: {} at {}", peer_id, addr);
                                }
                            } else {
                                error!("Failed to extract PeerId from bootstrap address: {}", addr);
                            }
                        }
                    } else {
                        debug!(
                            "Desired number of bootstrap nodes connected ({}); stopping reconnection attempts.",
                            connected_count
                        );
                    }
                }

                Some(event) = self.swarm.next() => {
                    match event {
                        SwarmEvent::NewListenAddr { address, .. } => {
                            info!("Swarm is listening on {:?}", address);
                        }
                        SwarmEvent::ConnectionEstablished { peer_id, connection_id, endpoint, num_established, concurrent_dial_errors, established_in} => {
                            info!(peer_id=%peer_id, connection_id=%connection_id, ?endpoint, num_established, ?established_in, ?concurrent_dial_errors, "Connection established. Adding to pending verification.");
                            let mut pending = pending_verification.lock().await;
                            pending.insert(peer_id);
                        }
                        SwarmEvent::ConnectionClosed { peer_id, .. } => {
                            debug!("Connection closed with peer: {:?}", peer_id);
                            let mut pending = pending_verification.lock().await;
                            pending.remove(&peer_id);
                            drop(pending); // Release lock

                            let mut verified = verified_peers.lock().await;
                            verified.remove(&peer_id);
                            drop(verified);

                            let mut keys = known_peers.lock().await;
                            keys.remove(&peer_id);
                            drop(keys);

                            debug!(peer_id=%peer_id, "Removing disconnected peer from Kademlia routing table.");
                            self.swarm.behaviour_mut().kademlia.remove_peer(&peer_id);
                        }
                        SwarmEvent::IncomingConnection { .. } => {
                            trace!("Incoming connection");
                        }
                        SwarmEvent::IncomingConnectionError { error, .. } => {
                            error!("Incoming connection failed: {:?}", error);
                        }
                        SwarmEvent::OutgoingConnectionError { error, .. } => {
                            error!("Outgoing connection failed: {:?}", error);
                        }
                        SwarmEvent::Behaviour(event) => {
                            match event {
                                StorbEvent::Mdns(event) => {
                                    self.inject_mdns_event(*event);
                                }
                                StorbEvent::Kademlia(event) => {
                                    let queries_clone = self.queries.clone();
                                    let mut queries = queries_clone.lock().await;
                                    trace!("Kademlia event received: {:?}", event);
                                    self.inject_kad_event(*event.clone(), &mut queries).await;
                                    self.inject_kad_incoming_query(*event);
                                }
                                StorbEvent::Identify(event) => {
                                    trace!("Identify event: {:?}", event);
                                    match *event {
                                        identify::Event::Received { peer_id, info, connection_id } => {
                                            // Existing logging...
                                                info!(
                                                connection_id=%connection_id,
                                                peer_id=%peer_id,
                                                listen_addrs=?info.listen_addrs,
                                                observed_addr=?info.observed_addr,
                                                protocols=?info.protocols,
                                                public_key=?info.public_key,
                                                agent_version=?info.agent_version,
                                                protocol_version=?info.protocol_version,
                                                "Identify::Received"
                                            );

                                            // Store public key (as before)
                                            {
                                                let mut keys = known_peers.lock().await;
                                                keys.insert(peer_id);
                                            }

                                            // Check if pending verification (as before)
                                            let is_pending = {
                                                    let mut pending = pending_verification.lock().await;
                                                    pending.remove(&peer_id)
                                            };

                                            if is_pending {
                                                info!(peer_id=%peer_id, "Peer was pending verification. Starting check...");
                                                let verifier = peer_verifier.clone();
                                                let verified_peers_clone = verified_peers.clone();
                                                let known_peers_clone = known_peers.clone();

                                                match verifier.verify_peer(peer_id).await {
                                                    Ok(true) => {
                                                        // Peer is verified
                                                        info!(peer_id=%peer_id, "Peer successfully verified");
                                                        {
                                                            let mut verified = verified_peers_clone.lock().await;
                                                            verified.insert(peer_id);
                                                        }

                                                        // --- Add valid addresses to Kademlia ---
                                                        debug!(peer_id=%peer_id, "Adding verified peer's valid addresses to Kademlia.");

                                                        let mut potential_addrs = HashSet::new(); // Use HashSet to avoid duplicates
                                                        // Add observed address first if potentially valid
                                                        let observed_addr = info.observed_addr.clone();
                                                        if is_valid_external_addr(&observed_addr) {
                                                            potential_addrs.insert(observed_addr);
                                                        }

                                                        // Add valid listen addresses
                                                        for addr in info.listen_addrs {
                                                            if is_valid_external_addr(&addr) {
                                                                potential_addrs.insert(addr);
                                                            } else {
                                                                trace!(peer_id=%peer_id, address=%addr, "Skipping invalid/local listen address for Kademlia.");
                                                            }
                                                        }

                                                        if potential_addrs.is_empty() {
                                                            warn!(peer_id=%peer_id, "No valid external addresses found for verified peer in Identify info.");
                                                        } else {
                                                            let kademlia = &mut self.swarm.behaviour_mut().kademlia;
                                                            for addr in potential_addrs {
                                                                debug!(peer_id=%peer_id, address=%addr, "Adding address to Kademlia.");
                                                                kademlia.add_address(&peer_id, addr);
                                                            }
                                                        }

                                                    }
                                                    Ok(false) => {
                                                        // Peer failed verification - Remove from Kademlia and Disconnect (as before)
                                                        warn!(peer_id=%peer_id, "Peer failed verification (e.g., not registered). Disconnecting and removing from Kademlia.");
                                                        self.swarm.behaviour_mut().kademlia.remove_peer(&peer_id);
                                                        let _ = self.swarm.disconnect_peer_id(peer_id);
                                                        {
                                                            let mut keys = known_peers_clone.lock().await;
                                                            keys.remove(&peer_id);
                                                        }
                                                    }
                                                    Err(e) => {
                                                        // Verification error - Remove from Kademlia and Disconnect (as before)
                                                            error!(peer_id=%peer_id, error=%e, "Verification check failed. Disconnecting and removing peer from Kademlia.");
                                                            self.swarm.behaviour_mut().kademlia.remove_peer(&peer_id);
                                                            let _ = self.swarm.disconnect_peer_id(peer_id);
                                                            {
                                                                let mut keys = known_peers_clone.lock().await;
                                                                keys.remove(&peer_id);
                                                            }
                                                    }
                                                }
                                            } else {
                                                    // Handle non-pending peer (as before)
                                                    trace!(peer_id=%peer_id, "Received identify info for non-pending peer.");
                                                    let is_verified = {
                                                        let verified = verified_peers.lock().await;
                                                        verified.contains(&peer_id)
                                                    };
                                                    if is_verified {
                                                        // Already verified, update Kademlia addresses
                                                        debug!(peer_id=%peer_id, "Peer already verified. Ensuring Kademlia addresses are up-to-date.");
                                                        let mut potential_addrs = HashSet::new();
                                                        let observed_addr = info.observed_addr.clone();
                                                        if is_valid_external_addr(&observed_addr) {
                                                            potential_addrs.insert(observed_addr);
                                                        }
                                                        for addr in info.listen_addrs {
                                                            if is_valid_external_addr(&addr) {
                                                                potential_addrs.insert(addr);
                                                            }
                                                        }
                                                        if !potential_addrs.is_empty() {
                                                                let kademlia = &mut self.swarm.behaviour_mut().kademlia;
                                                            for addr in potential_addrs {
                                                                kademlia.add_address(&peer_id, addr);
                                                            }
                                                        }
                                                    } else {
                                                        // Not pending and not verified (as before)
                                                        warn!(peer_id=%peer_id, "Received identify info for peer that is neither pending nor verified. Ignoring.");
                                                    }
                                            }
                                        },
                                        identify::Event::Sent { connection_id, peer_id } => {
                                            debug!("Identify::Sent to {}: {:?}", peer_id, connection_id);
                                        }
                                        identify::Event::Pushed { connection_id: _, peer_id, info } => {
                                            debug!("Identify::Pushed to {}: {:?}", peer_id, info);
                                        }
                                        identify::Event::Error { connection_id: _, peer_id, error } => {
                                            error!("Identify::Error with {}: {:?}", peer_id, error);
                                        }
                                    }
                                }
                                StorbEvent::Ping(event) => {
                                    trace!("Ping event: {:?}", event);
                                }
                            }
                        }
                        SwarmEvent::Dialing { peer_id, .. } => {
                            debug!("Dialing peer: {:?}", peer_id);
                        }
                        _ => {
                            trace!("Other swarm event: {:?}", event);
                        }
                    }
                }
                Some(command) = self.command_receiver.recv() => {
                    match command {
                        DhtCommand::Put {
                            key,
                            serialized_value,
                            response_tx,
                        } => {
                            info!("Received Put command");
                            match self.handle_put(key, serialized_value, response_tx).await {
                                Ok(_) => {}
                                Err(e) => {
                                    error!("Error handling PutPiece command: {:?}", e);
                                }
                            }
                        }
                        DhtCommand::Get { key, response_tx } => {
                            info!("Received Get command");
                            match self.handle_get(key, response_tx).await {
                                Ok(_) => {}
                                Err(e) => {
                                    error!("Error handling Get command: {:?}", e);
                                }
                            }
                        }
                        DhtCommand::StartProviding { key, response_tx } => {
                            info!("Received StartProviding command");
                            match self.handle_start_providing(key, response_tx).await {
                                Ok(_) => {}
                                Err(e) => {
                                    error!("Error handling StartProviding command: {:?}", e);
                                }
                            }
                        }
                        DhtCommand::GetProviders { key, response_tx } => {
                            info!("Received GetProviders command");
                            match self.handle_get_providers(key, response_tx).await {
                                Ok(_) => {}
                                Err(e) => {
                                    error!("Error handling GetProviders command: {:?}", e);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    async fn handle_put(
        &mut self,
        key: RecordKey,
        value: Vec<u8>,
        response_tx: oneshot::Sender<Result<(), Box<dyn std::error::Error + Send + Sync>>>,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        self.wait_for_bootstrap().await?;

        let record = Record {
            key: key.clone(),
            value,
            publisher: Some(*self.swarm.local_peer_id()),
            expires: None,
        };

        let id = self
            .swarm
            .behaviour_mut()
            .kademlia
            .put_record(record, Quorum::One) // TODO: Change to Quorum::Majority
            .map_err(|e| format!("Failed to store piece entry: {:?}", e))?;

        let mut queries = self.queries.lock().await;
        queries.insert(id, QueryChannel::PutRecord(response_tx));
        drop(queries);

        Ok(())
    }

    async fn handle_get(
        &mut self,
        key: RecordKey,
        response_tx: oneshot::Sender<
            Result<Vec<PeerRecord>, Box<dyn std::error::Error + Send + Sync>>,
        >,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        self.wait_for_bootstrap().await?;

        let id = self.swarm.behaviour_mut().kademlia.get_record(key);

        let mut queries = self.queries.lock().await;
        queries.insert(id, QueryChannel::GetRecord(1, vec![], response_tx));
        drop(queries);

        Ok(())
    }

    async fn handle_start_providing(
        &mut self,
        key: RecordKey,
        response_tx: oneshot::Sender<Result<(), Box<dyn std::error::Error + Send + Sync>>>,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        self.wait_for_bootstrap().await?;

        let id = self
            .swarm
            .behaviour_mut()
            .kademlia
            .start_providing(key)
            .map_err(|e| format!("Failed to register as a piece provider: {:?}", e))?;

        let mut queries = self.queries.lock().await;
        queries.insert(id, QueryChannel::StartProviding(response_tx));
        drop(queries);

        Ok(())
    }

    async fn handle_get_providers(
        &mut self,
        key: RecordKey,
        response_tx: oneshot::Sender<
            Result<HashSet<PeerId>, Box<dyn std::error::Error + Send + Sync>>,
        >,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        self.wait_for_bootstrap().await?;

        let id = self.swarm.behaviour_mut().kademlia.get_providers(key);

        let mut queries = self.queries.lock().await;
        queries.insert(id, QueryChannel::GetProviders(HashSet::new(), response_tx));
        drop(queries);

        Ok(())
    }

    /// Inserts or updates a tracker entry in the DHT.
    ///
    /// This function serializes the provided tracker value, constructs a record,
    /// and issues a Kademlia put_record query. It waits for the query response
    /// within a specified timeout.
    pub async fn put_tracker_entry(
        command_sender: mpsc::Sender<DhtCommand>,
        infohash: RecordKey,
        value: models::TrackerDHTValue,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let (response_tx, response_rx) = oneshot::channel();

        let serialized_value = models::serialize_dht_value(&models::DHTValue::Tracker(value))?;

        match command_sender
            .send(DhtCommand::Put {
                key: infohash.clone(),
                serialized_value,
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(())) => Ok(()),
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Retrieves a tracker entry from the DHT using its infohash.
    ///
    /// This function issues a get_record query and waits for the response.
    /// If a tracker record is found and successfully deserialized, it is returned.
    pub async fn get_tracker_entry(
        command_sender: mpsc::Sender<DhtCommand>,
        infohash: RecordKey,
    ) -> Result<Option<models::TrackerDHTValue>, Box<dyn std::error::Error + Send + Sync>> {
        let (response_tx, response_rx) = oneshot::channel();
        match command_sender
            .send(DhtCommand::Get {
                key: infohash.clone(),
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(records)) => {
                if records.is_empty() {
                    return Ok(None);
                }

                let record = match records.first() {
                    None => return Ok(None),
                    Some(r) => r,
                };

                let dht_value = models::deserialize_dht_value(&record.record.value)?;
                match dht_value {
                    models::DHTValue::Tracker(tracker) => Ok(Some(tracker)),
                    _ => Err("Record retrieved is not a tracker entry".into()),
                }
            }
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Inserts or updates a chunk entry in the DHT.
    ///
    /// This function serializes the provided chunk value, constructs a record,
    /// and issues a Kademlia put_record query. It waits for the query response
    /// within a specified timeout.
    pub async fn put_chunk_entry(
        command_sender: mpsc::Sender<DhtCommand>,
        chunk_key: RecordKey,
        value: models::ChunkDHTValue,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        // TODO: wait for bootstrap???
        let (response_tx, response_rx) = oneshot::channel();

        let serialized_value = models::serialize_dht_value(&models::DHTValue::Chunk(value))?;
        match command_sender
            .send(DhtCommand::Put {
                key: chunk_key,
                serialized_value,
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(())) => Ok(()),
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Retrieves a chunk entry from the DHT using its chunk key.
    ///
    /// This function issues a get_record query and waits for the response.
    /// If a chunk record is found and successfully deserialized, it is returned.
    pub async fn get_chunk_entry(
        command_sender: mpsc::Sender<DhtCommand>,
        chunk_key: RecordKey,
    ) -> Result<Option<models::ChunkDHTValue>, Box<dyn std::error::Error + Send + Sync>> {
        let (response_tx, response_rx) = oneshot::channel();
        match command_sender
            .send(DhtCommand::Get {
                key: chunk_key.clone(),
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(records)) => {
                if records.is_empty() {
                    error!("No records found for chunk key: {:?}", chunk_key);
                    return Ok(None);
                }

                let record = match records.first() {
                    None => return Ok(None),
                    Some(r) => r,
                };

                let dht_value = models::deserialize_dht_value(&record.record.value)?;
                match dht_value {
                    models::DHTValue::Chunk(chunk) => Ok(Some(chunk)),
                    _ => {
                        error!("Record retrieved is not a chunk entry");
                        Err("Record retrieved is not a chunk entry".into())
                    }
                }
            }
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    pub async fn put_piece_entry(
        command_sender: mpsc::Sender<DhtCommand>,
        key: RecordKey,
        value: models::PieceDHTValue,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let (response_tx, response_rx) = oneshot::channel();

        let serialized_value = models::serialize_dht_value(&models::DHTValue::Piece(value))?;

        match command_sender
            .send(DhtCommand::Put {
                key,
                serialized_value,
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(())) => Ok(()),
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Retrieves a piece entry from the DHT using its piece key.
    ///
    /// This function issues a get_record query and waits for the response.
    /// If a piece record is found and successfully deserialized, it is returned.
    pub async fn get_piece_entry(
        command_sender: &mpsc::Sender<DhtCommand>,
        piece_key: RecordKey,
    ) -> Result<Option<models::PieceDHTValue>, Box<dyn std::error::Error + Send + Sync + 'static>>
    {
        let (response_tx, response_rx) = oneshot::channel();
        match command_sender
            .send(DhtCommand::Get {
                key: piece_key.clone(),
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(records)) => {
                if records.is_empty() {
                    return Ok(None);
                }

                let record = match records.first() {
                    None => return Ok(None),
                    Some(r) => r,
                };

                let dht_value = models::deserialize_dht_value(&record.record.value)?;
                match dht_value {
                    models::DHTValue::Piece(piece) => Ok(Some(piece)),
                    _ => Err("Record retrieved is not a piece entry".into()),
                }
            }
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Advertises that this node is providing a particular piece in the DHT.
    ///
    /// This function issues a start_providing query to announce the availability
    /// of the specified piece.
    pub async fn start_providing_piece(
        command_sender: mpsc::Sender<DhtCommand>,
        piece_key: RecordKey,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let (response_tx, response_rx) = oneshot::channel();
        info!("Starting to provide piece {:?}", &piece_key);
        match command_sender
            .send(DhtCommand::StartProviding {
                key: piece_key.clone(),
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => {
                error!("Failed to start providing piece: {}", e);
                return Err(Box::new(e));
            }
        }

        match response_rx.await {
            Ok(Ok(_)) => Ok(()),
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Retrieves the set of peer IDs providing the specified piece.
    ///
    /// This function issues a get_providers query and waits for the response.
    pub async fn get_piece_providers(
        command_sender: &mpsc::Sender<DhtCommand>,
        piece_key: RecordKey,
    ) -> Result<HashSet<PeerId>, Box<dyn std::error::Error + Send + Sync + 'static>> {
        let (response_tx, response_rx) = oneshot::channel();
        match command_sender
            .send(DhtCommand::GetProviders {
                key: piece_key.clone(),
                response_tx,
            })
            .await
        {
            Ok(_) => {}
            Err(e) => return Err(e.into()),
        }

        match response_rx.await {
            Ok(Ok(providers)) => Ok(providers),
            Ok(Err(e)) => Err(e),
            Err(e) => Err(Box::new(e)),
        }
    }

    /// Removes a record from the DHT using its key.
    pub async fn remove_record(
        &mut self,
        key: RecordKey,
    ) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        self.wait_for_bootstrap().await?;
        self.swarm.behaviour_mut().kademlia.remove_record(&key);
        Ok(())
    }

    /// Waits until the bootstrap process is complete.
    ///
    /// This internal function blocks until the bootstrap watch channel signals completion.
    async fn wait_for_bootstrap(&mut self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        info!("Waiting for bootstrap to complete...");
        while !*self.bootstrap_done.borrow() {
            self.bootstrap_done.changed().await?;
        }
        info!("Bootstrap completed.");
        Ok(())
    }
}

impl Drop for StorbDHT {
    /// Cleans up network connections when the StorbDHT instance is dropped.
    ///
    /// This implementation disconnects all connected peers to ensure a graceful shutdown.
    fn drop(&mut self) {
        debug!("Dropping StorbDHT connections");
        let peers: Vec<PeerId> = self.swarm.connected_peers().copied().collect();
        for (idx, conn) in peers.iter().enumerate() {
            trace!("Dropping connection {:?} to {:?}", idx, conn);
            let _ = self.swarm.disconnect_peer_id(*conn);
        }

        debug!("Dropped all connections");
    }
}
